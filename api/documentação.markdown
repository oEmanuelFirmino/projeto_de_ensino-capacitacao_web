# üöÄ Configura√ß√£o do Ambiente Backend com Express + TypeScript

> **Objetivo:** Neste guia, vamos estruturar do zero um ambiente backend utilizando **Node.js**, **Express**, e **TypeScript**. Ao final, voc√™ ter√° seu **primeiro servidor rodando**!

---

## üìÅ 1. Estrutura Inicial do Projeto

Crie a pasta principal onde ficar√° sua API:

```bash
mkdir api && cd api
```

Abra o projeto no VS Code:

```bash
code .
```

> üí° _Dica:_ Se o comando `code .` n√£o funcionar, certifique-se de que o VS Code est√° no seu `PATH`.

---

## üß± 2. Inicializa√ß√£o do Projeto Node

Execute o comando abaixo e apenas pressione `Enter` para todas as perguntas:

```bash
npm init
```

> ‚úÖ Isso criar√° o arquivo `package.json`, essencial para gerenciar suas depend√™ncias.

---

## üõ†Ô∏è 3. Instala√ß√£o do TypeScript e Ferramentas de Execu√ß√£o

Instale o TypeScript e ferramentas auxiliares para execu√ß√£o:

```bash
npm install typescript ts-node tsx
```

Adicione os tipos do Node (depend√™ncia de desenvolvimento):

```bash
npm install @types/node -D
```

---

## üåê 4. Instala√ß√£o do Express e Vari√°veis de Ambiente

Adicione o framework Express e o dotenv:

```bash
npm install express dotenv
```

Instale os tipos do Express para uso com TypeScript:

```bash
npm install @types/express
```

---

## üß™ 5. Arquivo de Vari√°veis de Ambiente

Crie um arquivo chamado `.env` na **raiz do projeto** com o seguinte conte√∫do:

```env
HOST=localhost
PORT=3000
```

> üì¶ Esse arquivo ser√° utilizado para armazenar vari√°veis sens√≠veis ou configur√°veis, como porta e host do servidor.

---

## üî¢ 6. Configurando Script de Desenvolvimento

Edite o arquivo `package.json` e adicione o seguinte script na se√ß√£o de `scripts`:

```json
"scripts": {
  "dev": "tsx --watch src/server.ts"
}
```

> ‚ö° Isso permite que voc√™ inicie o servidor em modo de desenvolvimento com hot reload.

---

## üß¨ 7. Estrutura de C√≥digo Fonte

Crie a pasta onde ficar√° seu c√≥digo fonte:

```bash
mkdir src
```

Dentro da pasta `src`, crie um arquivo chamado `server.ts` (ou `index.ts`):

```bash
touch src/server.ts
```

---

## üóû 8. C√≥digo do Servidor Express

No arquivo `src/server.ts`, cole o seguinte c√≥digo:

```ts
import dotenv from "dotenv";
import express from "express";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || "localhost";

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(PORT, () => {
  console.log(`Server is running on http://${HOST}:${PORT}`);
});
```

> üìå _Este √© o seu primeiro endpoint! Quando acessarmos a raiz `/`, ele responder√° com ‚ÄúHello World!‚Äù._

---

## üîß 9. Rodando o Servidor

Para iniciar seu servidor em modo desenvolvimento:

```bash
npm run dev
```

Se tudo estiver correto, voc√™ ver√° no terminal:

```
Server is running on http://localhost:3000
```

Acesse no navegador: [http://localhost:3000](http://localhost:3000)

---

## üìå Conclus√£o

üéâ Voc√™ configurou um ambiente backend com TypeScript e Express do zero. Este ser√° o ponto de partida para estruturas mais robustas, incluindo rotas, middlewares, autentica√ß√£o e conex√£o com banco de dados.

---

> Posteriormente veremos: _Estrutura de rotas e organiza√ß√£o de arquivos para escalabilidade._
